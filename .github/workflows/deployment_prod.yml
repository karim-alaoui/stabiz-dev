name: Deploy to Production env
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    # Service container Postgresql postgresql
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image (also with version)
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db_test_laravel
        ## map the "external" 55432 port with the "internal" 5432
        ports:
          - 55432:5432
        # Set health checks to wait until postgresql database has started (it takes some seconds to start)
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.0' ]
        dependency-stability: [ prefer-stable ]

        laravel: [ '8.*' ]
        include:
          - laravel: 8.*
            testbench: 6.*

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v2
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Laravel Dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
          composer update --${{ matrix.dependency-stability }} --prefer-dist --no-interaction --no-suggest

      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        # Set environment
        env:
          DB_CONNECTION: pgsql
          DB_DATABASE: db_test_laravel
          DB_PORT: 55432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres

        run: php artisan migrate

      - name: Show dir
        run: pwd
      - name: PHP Version
        run: php --version

      # Code quality
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        # Set environment
        env:
          DB_CONNECTION: pgsql
          DB_DATABASE: db_test_laravel
          DB_PORT: 55432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          SCOUT_DRIVER: meilisearch
          MEILISEARCH_HOST: "http://143.244.128.141"
          SCOUT_QUEUE: false
        # reset the meilisearch so that it customizes the index to our needs which is important for our application
        run: php artisan reset:meilisearch && php artisan test --stop-on-failure

  deploy:
    runs-on: ubuntu-latest
    needs: laravel-tests # this job depends on "test" having finished
    steps:
      - name: Deploying on production
        uses: appleboy/ssh-action@master # An action made to control Linux servers
        with:
          host: ${{ secrets.STABIZ_PROD_IP }}
          username: ${{ secrets.STABIZ_PROD_USER }}
          key: ${{ secrets.STABIZ_PROD_PRIVATE_KEY }}
          port: 22
          script: |
            cd /var/www/stabiz # move the project dir
            eval "$(ssh-agent -s)" # start ssh aganet. We login to github using ssh key
            ssh-add ~/.ssh/ssh_github # add the key to ssh agent
            git pull origin main
            composer install --no-interaction
            php artisan migrate --force
            php artisan cache:clear
            composer dump-autoload
            php artisan config:cache
